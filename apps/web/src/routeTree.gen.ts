/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as SatatisticrootImport } from './routes/satatistic/__root';
import { Route as SatatisticIndexImport } from './routes/satatistic/index';

// Create Virtual Routes

const SatatisticImport = createFileRoute('/satatistic')();
const IndexLazyImport = createFileRoute('/')();

// Create/Update Routes

const SatatisticrootRoute = SatatisticrootImport.update({
  id: '/__root',
  getParentRoute: () => SatatisticRoute,
} as any);

const SatatisticRoute = SatatisticImport.update({
  id: '/satatistic',
  path: '/satatistic',
  getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then(d => d.Route));

const SatatisticIndexRoute = SatatisticIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SatatisticRoute,
} as any).lazy(() => import('./routes/satatistic/index.lazy').then(d => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/satatistic': {
      id: '/satatistic';
      path: '/satatistic';
      fullPath: '/satatistic';
      preLoaderRoute: typeof SatatisticImport;
      parentRoute: typeof rootRoute;
    };
    '/satatistic/__root': {
      id: '/satatistic/__root';
      path: '/satatistic';
      fullPath: '/satatistic';
      preLoaderRoute: typeof SatatisticrootImport;
      parentRoute: typeof SatatisticRoute;
    };
    '/satatistic/': {
      id: '/satatistic/';
      path: '/';
      fullPath: '/satatistic/';
      preLoaderRoute: typeof SatatisticIndexImport;
      parentRoute: typeof SatatisticImport;
    };
  }
}

// Create and export the route tree

interface SatatisticRouteChildren {
  SatatisticrootRoute: typeof SatatisticrootRoute;
  SatatisticIndexRoute: typeof SatatisticIndexRoute;
}

const SatatisticRouteChildren: SatatisticRouteChildren = {
  SatatisticrootRoute: SatatisticrootRoute,
  SatatisticIndexRoute: SatatisticIndexRoute,
};

const SatatisticRouteWithChildren = SatatisticRoute._addFileChildren(SatatisticRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/satatistic': typeof SatatisticrootRoute;
  '/satatistic/': typeof SatatisticIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/satatistic': typeof SatatisticIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/satatistic': typeof SatatisticRouteWithChildren;
  '/satatistic/__root': typeof SatatisticrootRoute;
  '/satatistic/': typeof SatatisticIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/satatistic' | '/satatistic/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/satatistic';
  id: '__root__' | '/' | '/satatistic' | '/satatistic/__root' | '/satatistic/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  SatatisticRoute: typeof SatatisticRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  SatatisticRoute: SatatisticRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/satatistic"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/satatistic": {
      "filePath": "satatistic",
      "children": [
        "/satatistic/__root",
        "/satatistic/"
      ]
    },
    "/satatistic/__root": {
      "filePath": "satatistic/__root.tsx",
      "parent": "/satatistic"
    },
    "/satatistic/": {
      "filePath": "satatistic/index.ts",
      "parent": "/satatistic"
    }
  }
}
ROUTE_MANIFEST_END */
