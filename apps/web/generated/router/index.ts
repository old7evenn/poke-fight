/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './../../src/routes/__root';
import { Route as LayoutImport } from './../../src/routes/_layout';

// Create Virtual Routes

const LayoutIndexLazyImport = createFileRoute('/_layout/')();
const LayoutStatisticIndexLazyImport = createFileRoute('/_layout/statistic/')();

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any);

const LayoutIndexLazyRoute = LayoutIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./../../src/routes/_layout/index.lazy').then(d => d.Route));

const LayoutStatisticIndexLazyRoute = LayoutStatisticIndexLazyImport.update({
  id: '/statistic/',
  path: '/statistic/',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./../../src/routes/_layout/statistic/index.lazy').then(d => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof LayoutImport;
      parentRoute: typeof rootRoute;
    };
    '/_layout/': {
      id: '/_layout/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof LayoutIndexLazyImport;
      parentRoute: typeof LayoutImport;
    };
    '/_layout/statistic/': {
      id: '/_layout/statistic/';
      path: '/statistic';
      fullPath: '/statistic';
      preLoaderRoute: typeof LayoutStatisticIndexLazyImport;
      parentRoute: typeof LayoutImport;
    };
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutIndexLazyRoute: typeof LayoutIndexLazyRoute;
  LayoutStatisticIndexLazyRoute: typeof LayoutStatisticIndexLazyRoute;
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexLazyRoute: LayoutIndexLazyRoute,
  LayoutStatisticIndexLazyRoute: LayoutStatisticIndexLazyRoute,
};

const LayoutRouteWithChildren = LayoutRoute._addFileChildren(LayoutRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren;
  '/': typeof LayoutIndexLazyRoute;
  '/statistic': typeof LayoutStatisticIndexLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexLazyRoute;
  '/statistic': typeof LayoutStatisticIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_layout': typeof LayoutRouteWithChildren;
  '/_layout/': typeof LayoutIndexLazyRoute;
  '/_layout/statistic/': typeof LayoutStatisticIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '' | '/' | '/statistic';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/statistic';
  id: '__root__' | '/_layout' | '/_layout/' | '/_layout/statistic/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/statistic/"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.lazy.tsx",
      "parent": "/_layout"
    },
    "/_layout/statistic/": {
      "filePath": "_layout/statistic/index.lazy.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
